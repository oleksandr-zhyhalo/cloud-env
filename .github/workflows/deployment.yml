name: Branch Deployment to Selected Env

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Git branch to deploy'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: eu-west-1 

    - name: Build and tag Docker image
      run: |
        docker build -t ${{ github.repository }}:${{ github.event.inputs.branch }} .
        docker tag ${{ github.repository }}:${{ github.event.inputs.branch }} ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.event.inputs.branch }}
        
    - name: Snyk Docker Image Scan
      uses: snyk/actions/docker@master
      with:
        args: --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
    - name: Run Unit Tests
      run: |
        docker run --rm simple-flask-app pytest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.event.inputs.branch }}

    - name: Deploy to ECS
      env:
        TASK_DEFINITION: ${{ secrets[github.event.inputs.environment == 'stage' && 'STAGE_TASK_DEFINITION' || 'PROD_TASK_DEFINITION'] }}
      run: |
          echo "${TASK_DEFINITION}" > ecs-task-definition.json
          aws ecs update-service \
            --cluster ${{ github.event.inputs.environment }}-cluster \
            --service ${{ github.event.inputs.environment }}-service \
            --task-definition ecs-task-definition.json \
            --force-new-deployment
  
    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ github.event.inputs.environment }}-cluster \
          --services ${{ github.event.inputs.environment }}-service